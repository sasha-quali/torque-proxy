/*
 * Torque API Reference
 *
 * This page contains information about the Torque APIs and how to use it.<br><br>To be able to test the API methods, you will need an access token to be set in the Authorize section.If you got to this page from your Torque account, we already made it available for you, but you can switch to a different token as needed.<br>To get a different token, use the 'Get token' function available under the 'Access Tokens' section. After running the method, copy the access_token you get in the response and set it in the Authorize fieldas 'Bearer access_token'. For example: Bearer fqSWuw72BbUVFn8AbokF77GJ0r5KEn9MiZjLXF8kBwI.<br><br>The API can be accessed with your account endpoint as will be mentioned in the descriptions and examples or using https://qtorque.io as the prefix instead.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Quali.Torque.Api.Attributes;
using Quali.Torque.Api.Models;

namespace Quali.Torque.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class BlueprintsApiController : ControllerBase
    { 
        /// <summary>
        /// Reset blueprint policies
        /// </summary>
        /// <remarks>Reset blueprint policies to the default behavior. Max duration will be cleared.</remarks>
        /// <param name="spaceName">Name of the space where the blueprint resides</param>
        /// <param name="blueprintName">Blueprint name</param>
        /// <response code="200">Success</response>
        /// <response code="404">Space or blueprint not found</response>
        /// <response code="422">Blueprint belongs to production repository</response>
        [HttpDelete]
        [Route("/api/spaces/{space_name}/blueprints/{blueprint_name}/policies")]
        [Authorize(Policy = "Bearer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSpacesSpaceNameBlueprintsBlueprintNamePoliciesDelete([FromRoute (Name = "space_name")][Required]string spaceName, [FromRoute (Name = "blueprint_name")][Required]string blueprintName);

        /// <summary>
        /// Get blueprint policy
        /// </summary>
        /// <remarks>Get blueprint policy.  Relevant only for blueprints in repository for sandbox environment.</remarks>
        /// <param name="spaceName">Name of the space containing the desired blueprint</param>
        /// <param name="blueprintName">Name of the blueprint</param>
        /// <response code="200">Success</response>
        /// <response code="404">Space or blueprint not found</response>
        /// <response code="422">Blueprint belongs to production repository</response>
        [HttpGet]
        [Route("/api/spaces/{space_name}/blueprints/{blueprint_name}/policies")]
        [Authorize(Policy = "Bearer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BlueprintPolicyResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSpacesSpaceNameBlueprintsBlueprintNamePoliciesGet([FromRoute (Name = "space_name")][Required]string spaceName, [FromRoute (Name = "blueprint_name")][Required]string blueprintName);

        /// <summary>
        /// Update blueprint policy
        /// </summary>
        /// <remarks>Update policies of a blueprint. Relevant only for blueprints in a sandbox repository.</remarks>
        /// <param name="spaceName">Name of the space where the blueprint resides</param>
        /// <param name="blueprintName">Blueprint name</param>
        /// <param name="updateBlueprintPolicyRequest">Update blueprint policy request</param>
        /// <response code="200">Success</response>
        /// <response code="422">Required parameters are missing, max duration too short or blueprint belongs to production repository</response>
        /// <response code="404">Space or blueprint not found</response>
        [HttpPut]
        [Route("/api/spaces/{space_name}/blueprints/{blueprint_name}/policies")]
        [Authorize(Policy = "Bearer")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSpacesSpaceNameBlueprintsBlueprintNamePoliciesPut([FromRoute (Name = "space_name")][Required]string spaceName, [FromRoute (Name = "blueprint_name")][Required]string blueprintName, [FromBody]UpdateBlueprintPolicyRequest updateBlueprintPolicyRequest);

        /// <summary>
        /// Get published blueprints
        /// </summary>
        /// <remarks>Returns a list of published blueprints in the space, including sample blueprints.</remarks>
        /// <param name="spaceName">Name of the space containing the desired blueprints</param>
        /// <param name="type">Blueprint type: \&quot;sandbox\&quot; or \&quot;production\&quot;&lt;br /&gt;              Optional: default is \&quot;sandbox\&quot;</param>
        /// <param name="commit">Blueprint commit: any commit name in a related repository&lt;br /&gt;              Optional: default is null</param>
        /// <param name="branch">Blueprint branch: any branch name in a related repository&lt;br /&gt;              Optional: default is null</param>
        /// <response code="200">Success</response>
        /// <response code="404">Space not found</response>
        [HttpGet]
        [Route("/api/spaces/{space_name}/blueprints")]
        [Authorize(Policy = "Bearer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<BlueprintForGetAllResponse>))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSpacesSpaceNameBlueprintsGet([FromRoute (Name = "space_name")][Required]string spaceName, [FromQuery (Name = "type")]string type, [FromQuery (Name = "commit")]string commit, [FromQuery (Name = "branch")]string branch);

        /// <summary>
        /// Validate blueprint
        /// </summary>
        /// <remarks>Runs validation check on a specific blueprint in the space.</remarks>
        /// <param name="spaceName">Name of the space containing the blueprint</param>
        /// <param name="blueprintValidationRequest"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Space or blueprint repository not found</response>
        /// <response code="422">Blueprint name, blueprint type, or blueprint repository branch is empty</response>
        [HttpPost]
        [Route("/api/spaces/{space_name}/validations/blueprints")]
        [Authorize(Policy = "Bearer")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(BlueprintValidationResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSpacesSpaceNameValidationsBlueprintsPost([FromRoute (Name = "space_name")][Required]string spaceName, [FromBody]BlueprintValidationRequest blueprintValidationRequest);
    }
}
