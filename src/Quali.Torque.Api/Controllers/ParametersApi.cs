/*
 * Torque API Reference
 *
 * This page contains information about the Torque APIs and how to use it.<br><br>To be able to test the API methods, you will need an access token to be set in the Authorize section.If you got to this page from your Torque account, we already made it available for you, but you can switch to a different token as needed.<br>To get a different token, use the 'Get token' function available under the 'Access Tokens' section. After running the method, copy the access_token you get in the response and set it in the Authorize fieldas 'Bearer access_token'. For example: Bearer fqSWuw72BbUVFn8AbokF77GJ0r5KEn9MiZjLXF8kBwI.<br><br>The API can be accessed with your account endpoint as will be mentioned in the descriptions and examples or using https://qtorque.io as the prefix instead.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Quali.Torque.Api.Attributes;
using Quali.Torque.Api.Models;

namespace Quali.Torque.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class ParametersApiController : ControllerBase
    { 
        /// <summary>
        /// Get all parameters
        /// </summary>
        /// <remarks>Gets all parameters from Parameter Store.</remarks>
        /// <response code="200">Success</response>
        [HttpGet]
        [Route("/api/settings/parameters")]
        [Authorize(Policy = "Bearer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<ParameterStoreItemResponse>))]
        public abstract IActionResult ApiSettingsParametersGet();

        /// <summary>
        /// Delete parameter
        /// </summary>
        /// <remarks>Deletes a parameter from Parameter Store.</remarks>
        /// <param name="paramName">Parameter name</param>
        /// <response code="422">Parameter not found in Parameter Store</response>
        /// <response code="200">Success</response>
        [HttpDelete]
        [Route("/api/settings/parameters/{param_name}")]
        [Authorize(Policy = "Bearer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSettingsParametersParamNameDelete([FromRoute (Name = "param_name")][Required]string paramName);

        /// <summary>
        /// Get parameter
        /// </summary>
        /// <remarks>Gets a parameter from Parameter Store.</remarks>
        /// <param name="paramName">Parameter name</param>
        /// <response code="200">Success</response>
        /// <response code="404">Parameter not found in Parameter Store</response>
        [HttpGet]
        [Route("/api/settings/parameters/{param_name}")]
        [Authorize(Policy = "Bearer")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ParameterStoreItemResponse))]
        [ProducesResponseType(statusCode: 404, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSettingsParametersParamNameGet([FromRoute (Name = "param_name")][Required]string paramName);

        /// <summary>
        /// Create parameter
        /// </summary>
        /// <remarks>Adds a parameter to Parameter Store.</remarks>
        /// <param name="parameterStoreItemRequest"></param>
        /// <response code="200">Success</response>
        /// <response code="422">Invalid parameter value</response>
        [HttpPost]
        [Route("/api/settings/parameters")]
        [Authorize(Policy = "Bearer")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 422, type: typeof(ErrorResponse))]
        public abstract IActionResult ApiSettingsParametersPost([FromBody]ParameterStoreItemRequest parameterStoreItemRequest);
    }
}
