/*
 * Torque API Reference
 *
 * This page contains information about the Torque APIs and how to use it.<br><br>To be able to test the API methods, you will need an access token to be set in the Authorize section.If you got to this page from your Torque account, we already made it available for you, but you can switch to a different token as needed.<br>To get a different token, use the 'Get token' function available under the 'Access Tokens' section. After running the method, copy the access_token you get in the response and set it in the Authorize fieldas 'Bearer access_token'. For example: Bearer fqSWuw72BbUVFn8AbokF77GJ0r5KEn9MiZjLXF8kBwI.<br><br>The API can be accessed with your account endpoint as will be mentioned in the descriptions and examples or using https://qtorque.io as the prefix instead.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Quali.Torque.Api.Converters;

namespace Quali.Torque.Api.Models
{ 
    /// <summary>
    /// Sandbox input information
    /// </summary>
    [DataContract]
    public class CreateSandboxInput : IEquatable<CreateSandboxInput>
    {
        /// <summary>
        /// Input name
        /// </summary>
        /// <value>Input name</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Input value
        /// </summary>
        /// <value>Input value</value>
        [DataMember(Name="value", EmitDefaultValue=true)]
        public string Value { get; set; }

        /// <summary>
        /// Indicates how to display input value in UI  &lt;remarks&gt;  To display input value in plain text in the UI, do not assign a value.&lt;br /&gt;  To hide input value behind bullets, enter the value \&quot;masked\&quot;.  &lt;/remarks&gt;
        /// </summary>
        /// <value>Indicates how to display input value in UI  &lt;remarks&gt;  To display input value in plain text in the UI, do not assign a value.&lt;br /&gt;  To hide input value behind bullets, enter the value \&quot;masked\&quot;.  &lt;/remarks&gt;</value>
        [DataMember(Name="display_style", EmitDefaultValue=true)]
        public string DisplayStyle { get; set; }

        /// <summary>
        /// Input description
        /// </summary>
        /// <value>Input description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Indicates if input is optional  &lt;remarks&gt;  When optional is set to true, user can leave the parameter empty.&lt;br /&gt;  When optional is set to false, empty value(s) will result in validation error(s).  &lt;/remarks&gt;
        /// </summary>
        /// <value>Indicates if input is optional  &lt;remarks&gt;  When optional is set to true, user can leave the parameter empty.&lt;br /&gt;  When optional is set to false, empty value(s) will result in validation error(s).  &lt;/remarks&gt;</value>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool Optional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSandboxInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DisplayStyle: ").Append(DisplayStyle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateSandboxInput)obj);
        }

        /// <summary>
        /// Returns true if CreateSandboxInput instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateSandboxInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSandboxInput other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    DisplayStyle == other.DisplayStyle ||
                    DisplayStyle != null &&
                    DisplayStyle.Equals(other.DisplayStyle)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Optional == other.Optional ||
                    
                    Optional.Equals(other.Optional)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (DisplayStyle != null)
                    hashCode = hashCode * 59 + DisplayStyle.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Optional.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateSandboxInput left, CreateSandboxInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateSandboxInput left, CreateSandboxInput right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
