/*
 * Torque API Reference
 *
 * This page contains information about the Torque APIs and how to use it.<br><br>To be able to test the API methods, you will need an access token to be set in the Authorize section.If you got to this page from your Torque account, we already made it available for you, but you can switch to a different token as needed.<br>To get a different token, use the 'Get token' function available under the 'Access Tokens' section. After running the method, copy the access_token you get in the response and set it in the Authorize fieldas 'Bearer access_token'. For example: Bearer fqSWuw72BbUVFn8AbokF77GJ0r5KEn9MiZjLXF8kBwI.<br><br>The API can be accessed with your account endpoint as will be mentioned in the descriptions and examples or using https://qtorque.io as the prefix instead.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Quali.Torque.Api.Converters;

namespace Quali.Torque.Api.Models
{ 
    /// <summary>
    /// Blueprint information
    /// </summary>
    [DataContract]
    public class BlueprintForGetAllResponse : IEquatable<BlueprintForGetAllResponse>
    {
        /// <summary>
        /// Blueprint name
        /// </summary>
        /// <value>Blueprint name</value>
        [DataMember(Name="blueprint_name", EmitDefaultValue=true)]
        public string BlueprintName { get; set; }

        /// <summary>
        /// Blueprint description
        /// </summary>
        /// <value>Blueprint description</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Blueprint repository URL
        /// </summary>
        /// <value>Blueprint repository URL</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [DataMember(Name="inputs", EmitDefaultValue=true)]
        public List<BlueprintInputResponse> Inputs { get; set; }

        /// <summary>
        /// Indicates if the blueprint is published or not
        /// </summary>
        /// <value>Indicates if the blueprint is published or not</value>
        [DataMember(Name="enabled", EmitDefaultValue=false)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Last modification date and time of the blueprint
        /// </summary>
        /// <value>Last modification date and time of the blueprint</value>
        [DataMember(Name="last_modified", EmitDefaultValue=false)]
        public DateTime LastModified { get; set; }

        /// <summary>
        /// Name of the last user who modified the blueprint
        /// </summary>
        /// <value>Name of the last user who modified the blueprint</value>
        [DataMember(Name="modified_by", EmitDefaultValue=true)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// Gets or Sets Applications
        /// </summary>
        [DataMember(Name="applications", EmitDefaultValue=true)]
        public List<BlueprintApplicationForGetAllResponse> Applications { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=true)]
        public List<BlueprintServiceForGetAllResponse> Services { get; set; }

        /// <summary>
        /// Gets or Sets Clouds
        /// </summary>
        [DataMember(Name="clouds", EmitDefaultValue=true)]
        public List<CloudResponse> Clouds { get; set; }

        /// <summary>
        /// Indicates if the blueprint is a sample blueprint
        /// </summary>
        /// <value>Indicates if the blueprint is a sample blueprint</value>
        [DataMember(Name="is_sample", EmitDefaultValue=false)]
        public bool IsSample { get; set; }

        /// <summary>
        /// Artifact files of the blueprint applications  &lt;remarks&gt;Maps application name to its relative artifacts path in the space&lt;/remarks&gt;
        /// </summary>
        /// <value>Artifact files of the blueprint applications  &lt;remarks&gt;Maps application name to its relative artifacts path in the space&lt;/remarks&gt;</value>
        [DataMember(Name="artifacts", EmitDefaultValue=true)]
        public Dictionary<string, string> Artifacts { get; set; }

        /// <summary>
        /// Gets or Sets EnvironmentType
        /// </summary>
        [DataMember(Name="environment_type", EmitDefaultValue=false)]
        public Object EnvironmentType { get; set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [DataMember(Name="errors", EmitDefaultValue=true)]
        public List<Error> Errors { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=true)]
        public List<BlueprintTagResponse> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Policies
        /// </summary>
        [DataMember(Name="policies", EmitDefaultValue=false)]
        public BlueprintPolicyResponse Policies { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public BlueprintCostResponse Cost { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="links", EmitDefaultValue=true)]
        public List<Hyperlink> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlueprintForGetAllResponse {\n");
            sb.Append("  BlueprintName: ").Append(BlueprintName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Clouds: ").Append(Clouds).Append("\n");
            sb.Append("  IsSample: ").Append(IsSample).Append("\n");
            sb.Append("  Artifacts: ").Append(Artifacts).Append("\n");
            sb.Append("  EnvironmentType: ").Append(EnvironmentType).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BlueprintForGetAllResponse)obj);
        }

        /// <summary>
        /// Returns true if BlueprintForGetAllResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of BlueprintForGetAllResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlueprintForGetAllResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlueprintName == other.BlueprintName ||
                    BlueprintName != null &&
                    BlueprintName.Equals(other.BlueprintName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Inputs == other.Inputs ||
                    Inputs != null &&
                    other.Inputs != null &&
                    Inputs.SequenceEqual(other.Inputs)
                ) && 
                (
                    Enabled == other.Enabled ||
                    
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    LastModified == other.LastModified ||
                    LastModified != null &&
                    LastModified.Equals(other.LastModified)
                ) && 
                (
                    ModifiedBy == other.ModifiedBy ||
                    ModifiedBy != null &&
                    ModifiedBy.Equals(other.ModifiedBy)
                ) && 
                (
                    Applications == other.Applications ||
                    Applications != null &&
                    other.Applications != null &&
                    Applications.SequenceEqual(other.Applications)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    other.Services != null &&
                    Services.SequenceEqual(other.Services)
                ) && 
                (
                    Clouds == other.Clouds ||
                    Clouds != null &&
                    other.Clouds != null &&
                    Clouds.SequenceEqual(other.Clouds)
                ) && 
                (
                    IsSample == other.IsSample ||
                    
                    IsSample.Equals(other.IsSample)
                ) && 
                (
                    Artifacts == other.Artifacts ||
                    Artifacts != null &&
                    other.Artifacts != null &&
                    Artifacts.SequenceEqual(other.Artifacts)
                ) && 
                (
                    EnvironmentType == other.EnvironmentType ||
                    EnvironmentType != null &&
                    EnvironmentType.Equals(other.EnvironmentType)
                ) && 
                (
                    Errors == other.Errors ||
                    Errors != null &&
                    other.Errors != null &&
                    Errors.SequenceEqual(other.Errors)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Policies == other.Policies ||
                    Policies != null &&
                    Policies.Equals(other.Policies)
                ) && 
                (
                    Cost == other.Cost ||
                    Cost != null &&
                    Cost.Equals(other.Cost)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    other.Links != null &&
                    Links.SequenceEqual(other.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BlueprintName != null)
                    hashCode = hashCode * 59 + BlueprintName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Inputs != null)
                    hashCode = hashCode * 59 + Inputs.GetHashCode();
                    
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (LastModified != null)
                    hashCode = hashCode * 59 + LastModified.GetHashCode();
                    if (ModifiedBy != null)
                    hashCode = hashCode * 59 + ModifiedBy.GetHashCode();
                    if (Applications != null)
                    hashCode = hashCode * 59 + Applications.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                    if (Clouds != null)
                    hashCode = hashCode * 59 + Clouds.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSample.GetHashCode();
                    if (Artifacts != null)
                    hashCode = hashCode * 59 + Artifacts.GetHashCode();
                    if (EnvironmentType != null)
                    hashCode = hashCode * 59 + EnvironmentType.GetHashCode();
                    if (Errors != null)
                    hashCode = hashCode * 59 + Errors.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Policies != null)
                    hashCode = hashCode * 59 + Policies.GetHashCode();
                    if (Cost != null)
                    hashCode = hashCode * 59 + Cost.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BlueprintForGetAllResponse left, BlueprintForGetAllResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BlueprintForGetAllResponse left, BlueprintForGetAllResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
